<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abase-Yourself</title>
  
  <subtitle>迷茫的引路人；飘摇的风向标；通透的避风港；破碎的白日梦。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://baka99.com/"/>
  <updated>2020-04-21T04:18:19.838Z</updated>
  <id>https://baka99.com/</id>
  
  <author>
    <name>Life4Gal</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://baka99.com/2020/04/20/hello-world/"/>
    <id>https://baka99.com/2020/04/20/hello-world/</id>
    <published>2020-04-21T04:18:19.834Z</published>
    <updated>2020-04-21T04:18:19.838Z</updated>
    
    <content type="html"><![CDATA[<p>事实证明，WordPress一点也不香(其实是我自己太菜了)，而且也没有多余的时间管理，一直想找一个轻量一些的博客框架安安心心的写点文章，直到我遇见了<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>。</p><p>网上用Hexo架设博客的教程遍地都是，这里只是记录一下自己搭建的过程。</p><h2 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h2><h3 id="我的系统"><a href="#我的系统" class="headerlink" title="我的系统"></a>我的系统</h3><p><strong>虚拟机: Ubuntu 19.10</strong><br><strong>虚拟化: VMWare</strong></p><a id="more"></a><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git-core</span><br></pre></td></tr></table></figure><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>我是在<a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">nodesource</a>安装的，可以根据自己情况选择安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -</span><br><span class="line">$ sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>最好的教程就在<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a><br>我是使用以下命令安装的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo-cli</span><br><span class="line">$ sudo npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>使用sudo是因为我这里有权限问题</p><h4 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog<span class="comment"># 博客的文件名为blog</span></span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install<span class="comment">#进行安装</span></span><br><span class="line">$ hexo server<span class="comment">#启动</span></span><br></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到你的成果了</p><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>这里的配置我是参考<a href="https://segmentfault.com/a/1190000005624504" target="_blank" rel="noopener">jsyzchen</a>的文章<br><del>原创不原创我不知道，我先看到他的那他就是原创</del>🤔🤔🤔</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia<span class="comment">#下载主题</span></span><br><span class="line">$ <span class="built_in">cd</span> themes/yilia</span><br><span class="line">$ git pull<span class="comment">#之后更新用</span></span><br></pre></td></tr></table></figure><p>添加<a href="https://github.com/overtrue/share.js" target="_blank" rel="noopener">Share.js</a><br><del>我基本都不用</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim syilia/_config.yml<span class="comment">#我用的是Ubuntu所以直接用文本编辑器改的</span></span><br></pre></td></tr></table></figure><p>立里面都是中文,根据需求自己改</p><p>找到 share_jia: false 这一行,在下面加入<br>share_addthis: false<br>share_social: true</p><p>编辑yilia/layout/_partial/head.ejs文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim syilia/layout/_partial/head.ejs<span class="comment">#我用的是Ubuntu所以直接用文本编辑器改的</span></span><br></pre></td></tr></table></figure><p>加入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.share_social)&#123; %&gt;</span><br><span class="line">&lt;%- css(&#39;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;social-share.js&#x2F;1.0.13&#x2F;css&#x2F;share.min&#39;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p><del>加在那里?那不是一堆差不多格式的代码么</del></p><p>进入yilia/layout/_partial/post目录，添加share_social.ejs文件,代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;padding:0 40px 10px;&quot;&gt;</span><br><span class="line">&lt;!-- social-share Button BEGIN --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;social-share&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;social-share.js&#x2F;1.0.15&#x2F;js&#x2F;social-share.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- social-share Button END --&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>编辑yilia/layout/_partial/article.ejs文件，找到theme.share_jia的位置，把加载social-share的代码放在与他们同级的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; theme.share_social)&#123; %&gt;</span><br><span class="line">&lt;%- partial(&#39;post&#x2F;share_social&#39;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p><del>这里假定你有一个Github账号</del><br>先生成一个 <code>SSH key</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"Github的注册邮箱地址"</span></span><br></pre></td></tr></table></figure><p>一路回车不用管<br>默认生成位置是 /home/你的用户名/.ssh/ 没看到记的打开显示隐藏文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /home/你的用户名/.ssh/id_rsa.pub<span class="comment">#我用的是Ubuntu所以直接用文本编辑器改的</span></span><br></pre></td></tr></table></figure><p><strong>全部复制下来</strong></p><p>访问 <strong>GitHub – Settings – SSH and GPG keys – New SSH key</strong><br><code>Title</code>想写什么写什么 <code>Key</code>把刚才复制的内容复制进去</p><p>修改博客文件blog根目录的<code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>部署到GitHub上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>访问 <a href="https://username.github.io/" target="_blank" rel="noopener">https://username.github.io/</a> 查看你的成果</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事实证明，WordPress一点也不香(其实是我自己太菜了)，而且也没有多余的时间管理，一直想找一个轻量一些的博客框架安安心心的写点文章，直到我遇见了&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;网上用Hexo架设博客的教程遍地都是，这里只是记录一下自己搭建的过程。&lt;/p&gt;
&lt;h2 id=&quot;开始吧&quot;&gt;&lt;a href=&quot;#开始吧&quot; class=&quot;headerlink&quot; title=&quot;开始吧&quot;&gt;&lt;/a&gt;开始吧&lt;/h2&gt;&lt;h3 id=&quot;我的系统&quot;&gt;&lt;a href=&quot;#我的系统&quot; class=&quot;headerlink&quot; title=&quot;我的系统&quot;&gt;&lt;/a&gt;我的系统&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;虚拟机: Ubuntu 19.10&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;虚拟化: VMWare&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客记录" scheme="https://baka99.com/categories/%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="hello-world" scheme="https://baka99.com/tags/hello-world/"/>
    
  </entry>
  
  <entry>
    <title>类模板</title>
    <link href="https://baka99.com/2020/04/20/%E7%B1%BB%E6%A8%A1%E6%9D%BF/"/>
    <id>https://baka99.com/2020/04/20/%E7%B1%BB%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-04-21T04:18:10.673Z</published>
    <updated>2020-04-21T04:18:10.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-有关类模板的一些笔记"><a href="#C-有关类模板的一些笔记" class="headerlink" title="C++有关类模板的一些笔记"></a>C++有关类模板的一些笔记</h1><h2 id="类模板示例"><a href="#类模板示例" class="headerlink" title="类模板示例"></a>类模板示例</h2><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="class"><span class="keyword">class</span> <span class="title">Container</span> = <span class="title">std</span>:</span>:<span class="built_in">deque</span>&lt;T&gt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> value_type = <span class="keyword">typename</span> Container::value_type;</span><br><span class="line"><span class="keyword">using</span> reference = <span class="keyword">typename</span> Container::reference;</span><br><span class="line"><span class="keyword">using</span> const_reference = <span class="keyword">typename</span> Container::const_reference;</span><br><span class="line"><span class="keyword">using</span> size_type = <span class="keyword">typename</span> Container::size_type;</span><br><span class="line"><span class="keyword">using</span> container_type = Container;</span><br><span class="line"></span><br><span class="line">myStack() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(<span class="keyword">const</span> container_type&amp; container)</span> : <span class="title">c</span><span class="params">(container)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(container_type&amp;&amp; container)</span> <span class="keyword">noexcept</span> : <span class="title">c</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">move</span>(container))</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(<span class="keyword">const</span> myStack&lt;value_type&gt;&amp; other)</span> : <span class="title">c</span><span class="params">(other.c)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(myStack&lt;value_type&gt;&amp;&amp; other)</span> <span class="keyword">noexcept</span> : <span class="title">c</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">move</span>(other.c))</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">[[nodiscard]] <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[nodiscard]] <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[nodiscard]] <span class="function">reference <span class="title">top</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[nodiscard]] <span class="function">const_reference <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> value_type&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c.push_back(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(value_type&amp;&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c.push_back(<span class="built_in">std</span>::<span class="built_in">move</span>(val));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ... val_type&gt;</span><br><span class="line"><span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">emplace</span><span class="params">(val_type&amp;&amp;... val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.emplace_back(<span class="built_in">std</span>::forward&lt;val_type&gt;(val)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(myStack&amp; other)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::swap(c, other.c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[nodiscard]] <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; lhs, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> lhs.c == rhs.c;</span><br><span class="line">&#125;</span><br><span class="line">[[nodiscard]] <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; lhs, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="keyword">operator</span>==(<span class="built_in">std</span>::forward&lt;<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp;&gt;(lhs), <span class="built_in">std</span>::forward&lt;<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp;&gt;(rhs));</span><br><span class="line">&#125;</span><br><span class="line">[[nodiscard]] <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; lhs, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> lhs.c &lt; rhs.c;</span><br><span class="line">&#125;</span><br><span class="line">[[nodiscard]] <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; lhs, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> lhs.c &lt;= rhs.c;</span><br><span class="line">&#125;</span><br><span class="line">[[nodiscard]] <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; lhs, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="keyword">operator</span>&lt;=(<span class="built_in">std</span>::forward&lt;<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp;&gt;(lhs), <span class="built_in">std</span>::forward&lt;<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp;&gt;(rhs));</span><br><span class="line">&#125;</span><br><span class="line">[[nodiscard]] <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; lhs, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="keyword">operator</span>&lt;(<span class="built_in">std</span>::forward&lt;<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp;&gt;(lhs), <span class="built_in">std</span>::forward&lt;<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp;&gt;(rhs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    container_type c&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="模板使用"><a href="#模板使用" class="headerlink" title="模板使用"></a>模板使用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">myStack&lt;<span class="keyword">int</span>&gt; int_stack;</span><br><span class="line">int_stack.push(<span class="number">42</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; int_stack.top() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">myStack&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; str_stack;</span><br><span class="line">str_stack.push(<span class="string">"42"</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; str_stack.top() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><ul><li><p>模板的参数类型可以是任何类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myStack&lt;<span class="keyword">double</span>&gt; double_stack;</span><br><span class="line">myStack&lt;<span class="keyword">double</span>*&gt; double_ptr_stack;</span><br></pre></td></tr></table></figure></li><li><p>成员函数只有<strong>被调用时</strong>才会实例化</p></li><li><p>如果模板类含有 <strong>static</strong>数据，只有两个类型相同的模板实例才会共享同一个<strong>static</strong>数据</p></li><li><p>模板成员函数只有在调用时才会实例化，所以即使有的类型不支持模板的某些操作，也可以使用模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设myStack有个print函数，把容器里的元素全部输出</span></span><br><span class="line">[[nodiscard]] <span class="function"><span class="built_in">std</span>::ostream&amp; <span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream&amp; os)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ele : c)</span><br><span class="line">    &#123;</span><br><span class="line">        os &lt;&lt; ele;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即使元素类型不支持这样操作，但是依旧可以使用该模板</span></span><br><span class="line">myStack&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; pair_stack;</span><br><span class="line">pair_stack.push(<span class="built_in">std</span>::make_pair(<span class="number">1</span>, <span class="number">42</span>));<span class="comment">// 没问题</span></span><br><span class="line">pair_stack.<span class="built_in">print</span>();<span class="comment">// 严重错误，没有针对pair类型的&lt;&lt;的操作</span></span><br></pre></td></tr></table></figure><ul><li><p>一个更常见的输出方法是实现友元,然后把print()定义为私有</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> <span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream&amp; os, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; <span class="built_in">stack</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span>.<span class="built_in">print</span>(os);</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="模板特例化"><a href="#模板特例化" class="headerlink" title="模板特例化"></a>模板特例化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myStack</span>&lt;std::string, std::vector&lt;std::string&gt;&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> value_type = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;::value_type;</span><br><span class="line">    <span class="keyword">using</span> reference = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;::reference;</span><br><span class="line">    <span class="keyword">using</span> const_reference = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;::const_reference;</span><br><span class="line">    <span class="keyword">using</span> size_type = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;::size_type;</span><br><span class="line">    <span class="keyword">using</span> container_type = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    container_type c&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>模板特例化的用于针对某些类型进行独有的操作</li></ul><h3 id="模板偏特化"><a href="#模板偏特化" class="headerlink" title="模板偏特化"></a>模板偏特化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myStack</span>&lt;T*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">using</span> value_type = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;T*&gt;::value_type;</span><br><span class="line"><span class="keyword">using</span> reference = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;T*&gt;::reference;</span><br><span class="line"><span class="keyword">using</span> const_reference = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;T*&gt;::const_reference;</span><br><span class="line"><span class="keyword">using</span> size_type = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;T*&gt;::size_type;</span><br><span class="line"><span class="keyword">using</span> container_type = <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;T*&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">container_type c&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>模板偏特化并不特例化某种类型，只是特别指定实例化为该类型的指针</li></ul><h3 id="多个泛型的模板类"><a href="#多个泛型的模板类" class="headerlink" title="多个泛型的模板类"></a>多个泛型的模板类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPair</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::pair&lt;T1, T2&gt; p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPair</span>&lt;T, int&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::pair&lt;T, <span class="keyword">int</span>&gt; p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPair</span>&lt;int, int&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPair</span>&lt;std::string, T&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::pair&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, T&gt; p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPair</span>&lt;T, T&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::pair&lt;T, T&gt; p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPair</span>&lt;T1*, T2*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::pair&lt;T1*, T2*&gt; p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>可以选择对任意一个泛型进行全特化或是偏特化，编译器总会找到那个<strong>最特例化</strong>的模板应用(有些编译器可能会报二义性)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">myPair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; id_pair;<span class="comment">// myPair&lt;T1, T2&gt;</span></span><br><span class="line">myPair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ii_pair;<span class="comment">// myPair&lt;int, int&gt;，即使myPair&lt;T, int&gt;可见</span></span><br><span class="line">myPair&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; si_pair;<span class="comment">// myPair&lt;T, int&gt;，因为这个模板在 myPair&lt;std::string, T&gt; 前可见</span></span><br><span class="line">myPair&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">double</span>&gt; sd_pair;<span class="comment">// myPair&lt;std::string, T&gt;</span></span><br><span class="line">myPair&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; cc_pair;<span class="comment">// myPair&lt;T, T&gt;</span></span><br><span class="line">myPair&lt;<span class="keyword">int</span>*, <span class="keyword">double</span>*&gt; ipdp_pair;<span class="comment">// myPair&lt;T1*, T2*&gt;</span></span><br><span class="line">myPair&lt;<span class="keyword">int</span>*, <span class="keyword">int</span>*&gt; ipip_pair;<span class="comment">// myPair&lt;T, T&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="模板类型推断"><a href="#模板类型推断" class="headerlink" title="模板类型推断"></a>模板类型推断</h2><ul><li>C++17开始如果构造函数可以推断出所有模板参数，就不需要显式指定模板参数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">myStack&lt;<span class="keyword">int</span>&gt; int_stack;</span><br><span class="line"><span class="function">myStack <span class="title">ref_stack</span><span class="params">(int_stack)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 myStack 中加入这个构造函数(注意必须是T而不能是 value_type， 因为没推断出T之前 value_type 是未知的)</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span> : <span class="title">c</span><span class="params">(&#123; val &#125;)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">myStack <span class="title">ded_stack</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意传字符字面量会出现麻烦</span></span><br><span class="line"><span class="function">myStack <span class="title">char_stack</span><span class="params">(<span class="string">"42"</span>)</span></span>;<span class="comment">// myStack&lt;char[3]&gt;</span></span><br><span class="line"><span class="comment">// 将上面的构造函数改为(两个构造函数只能有一个，不然无法推断)</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(T val)</span> : <span class="title">c</span><span class="params">(&#123; val &#125;)</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 此时可以正确把字符字面量推断为 const char*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 既然是传值那当然是使用 move 来避免不必要的拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(T val)</span> : <span class="title">c</span><span class="params">(&#123; <span class="built_in">std</span>::<span class="built_in">move</span>(val) &#125;)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>如果我就是想用引用的构造怎么办呢？C++17新引入了<strong>deduction guide</strong>允许用户指定某个类型实例化的实际类型</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个放在类里面</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span> : <span class="title">c</span><span class="params">(&#123; val &#125;)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面两个放在类外面</span></span><br><span class="line">myStack(<span class="keyword">const</span> <span class="keyword">char</span>*)-&gt;myStack&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br><span class="line">myStack(<span class="keyword">char</span>[])-&gt;myStack&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面两个如果放在类里面会报错</span></span><br><span class="line"><span class="comment">// myStack(const char*)-&gt;myStack&lt;std::string&gt;;并没有实现构造函数</span></span><br><span class="line"><span class="comment">// myStack(const char* str)-&gt;myStack&lt;std::string&gt; : c(&#123;str&#125;) &#123;&#125; 会和 explicit myStack(const T&amp; val) : c(&#123; val &#125;) &#123;&#125; 产生二义性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时在构造 myStack 就可以不写参数</span></span><br><span class="line"><span class="function">myStack <span class="title">int_stack</span><span class="params">(<span class="number">1</span>)</span></span>;<span class="comment">// myStack int_stack&#123;1&#125;; 也一样</span></span><br><span class="line"><span class="function">myStack <span class="title">string_stack</span><span class="params">(<span class="string">"42"</span>)</span></span>;<span class="comment">// 不再是 myStack&lt;char[3]&gt; 而是 myStack&lt;std::string&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结构体模板化"><a href="#结构体模板化" class="headerlink" title="结构体模板化"></a>结构体模板化</h2><ul><li>结构体也能作为模板(实际上对于能在class上使用的方法对struct一样适用)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T val&#123;&#125;;</span><br><span class="line"><span class="keyword">int</span> i&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Foo() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">explicit Foo(const T&amp; v, int _i) : val(v), i(_i) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Foo&lt;<span class="keyword">int</span>&gt; foo1;</span><br><span class="line">foo1.val = <span class="number">42</span>;</span><br><span class="line">foo1.i = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Foo <span class="title">foo2</span><span class="params">(<span class="number">42</span>, <span class="number">42</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对class的其他操作也可以对struct使用</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><ul><li><del>对于C++来说，struct结构体与class类的唯一差别就是成员的默认访问权限</del></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-有关类模板的一些笔记&quot;&gt;&lt;a href=&quot;#C-有关类模板的一些笔记&quot; class=&quot;headerlink&quot; title=&quot;C++有关类模板的一些笔记&quot;&gt;&lt;/a&gt;C++有关类模板的一些笔记&lt;/h1&gt;&lt;h2 id=&quot;类模板示例&quot;&gt;&lt;a href=&quot;#类模板示例&quot; class=&quot;headerlink&quot; title=&quot;类模板示例&quot;&gt;&lt;/a&gt;类模板示例&lt;/h2&gt;
    
    </summary>
    
    
      <category term="CPP-模板" scheme="https://baka99.com/categories/CPP-%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="CPP-类模板" scheme="https://baka99.com/tags/CPP-%E7%B1%BB%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>函数模板</title>
    <link href="https://baka99.com/2020/04/20/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
    <id>https://baka99.com/2020/04/20/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-04-21T04:18:03.529Z</published>
    <updated>2020-04-21T04:18:03.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-有关函数模板的一些笔记"><a href="#C-有关函数模板的一些笔记" class="headerlink" title="C++有关函数模板的一些笔记"></a>C++有关函数模板的一些笔记</h1><h2 id="模板实参推断"><a href="#模板实参推断" class="headerlink" title="模板实参推断"></a>模板实参推断</h2><a id="more"></a><h3 id="模板参数不允许隐式转换，这表示你必须保证你传入模板函数的参数必须匹配"><a href="#模板参数不允许隐式转换，这表示你必须保证你传入模板函数的参数必须匹配" class="headerlink" title="模板参数不允许隐式转换，这表示你必须保证你传入模板函数的参数必须匹配"></a><strong>模板参数不允许隐式转换</strong>，这表示你必须保证你传入模板函数的参数<strong>必须</strong>匹配</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span>(<span class="string">"hello"</span>, s);<span class="comment">// 严重错误，不允许将const char[6]转换为std::string或是将std::string转换为const char[6]</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">1</span>, <span class="number">42</span>);<span class="comment">//调用int max(int, int)</span></span><br><span class="line"><span class="built_in">max</span>(<span class="string">'1'</span>, <span class="number">42</span>);<span class="comment">//依旧调用int max(int, int)，因为模板函数不允许隐式转换</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">1.0</span>, <span class="number">42.0</span>);<span class="comment">//调用模板，推断为double max(double, double)</span></span><br><span class="line"><span class="built_in">max</span>(<span class="string">'1'</span>, <span class="string">'2'</span>);<span class="comment">//调用模板，推断为char max(char, char)</span></span><br><span class="line"><span class="built_in">max</span>&lt;&gt;(<span class="number">1</span>, <span class="number">42</span>);<span class="comment">//显式指定调用模板函数特例int max(int, int)</span></span><br></pre></td></tr></table></figure><h3 id="const-amp-volatile-限定符将被忽略，数组或者函数将转换为指针"><a href="#const-amp-volatile-限定符将被忽略，数组或者函数将转换为指针" class="headerlink" title="const &amp; volatile 限定符将被忽略，数组或者函数将转换为指针"></a>const &amp; volatile 限定符将被忽略，数组或者函数将转换为指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> b = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span>&amp; c = b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span>(a, b);<span class="comment">// T推断为int</span></span><br><span class="line"><span class="built_in">max</span>(b, b);<span class="comment">// T推断为int</span></span><br><span class="line"><span class="built_in">max</span>(a, c);<span class="comment">// T推断为int(c的const限定符被忽略)</span></span><br><span class="line"><span class="built_in">max</span>(&amp;a, arr);<span class="comment">// T被推断为int*</span></span><br></pre></td></tr></table></figure><h3 id="解决不匹配方法"><a href="#解决不匹配方法" class="headerlink" title="解决不匹配方法"></a>解决不匹配方法</h3><ul><li>显式转换参数类型：<strong>max(3.14， static_cast<double>(42))</strong></li><li>指定T：<strong>max<double>(1, 3.14)</strong></li><li>显式要求使用模板：<strong>max&lt;&gt;(1, 42)</strong></li><li>用两个模板参数指定不同类型：<strong>template&lt;typename T1, typename T2&gt;</strong></li></ul><h2 id="模板返回值类型"><a href="#模板返回值类型" class="headerlink" title="模板返回值类型"></a>模板返回值类型</h2><h3 id="模板函数的返回值类型不能被推断，必须显式指定"><a href="#模板函数的返回值类型不能被推断，必须显式指定" class="headerlink" title="模板函数的返回值类型不能被推断，必须显式指定"></a>模板函数的返回值类型不能被推断，必须显式指定</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function">RT <span class="title">max</span><span class="params">(T1 a, T2 b)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span>(<span class="number">3.14</span>, <span class="number">42</span>);<span class="comment">// 严重错误，无法判断返回值类型</span></span><br><span class="line"><span class="built_in">max</span>&lt;<span class="keyword">double</span>&gt;(<span class="number">3.14</span>, <span class="number">42</span>);<span class="comment">// 显式指定返回类型为double, T1和T2被推断</span></span><br></pre></td></tr></table></figure><blockquote><p>C++14允许auto作为返回类型，它通过return语句推断返回类型</p></blockquote><h3 id="如果无法指定返回值类型，可以使用以下方法获得"><a href="#如果无法指定返回值类型，可以使用以下方法获得" class="headerlink" title="如果无法指定返回值类型，可以使用以下方法获得"></a>如果无法指定返回值类型，可以使用以下方法获得</h3><ul><li><p>尾置返回值类型(C++ 11)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">auto max(T1 a, T2 b) -&gt; decltype(a &gt; b ? a : b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的写法是一样的</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">auto max(T1 a, T2 b) -&gt; decltype(true ? a : b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果T必须是引用，上述方法则会引发 run-time error，返回一个局部引用，此时可以使用 <a href="https://en.cppreference.com/w/cpp/types/decay" target="_blank" rel="noopener">std::decay</a> 去掉<strong>CV限定符</strong>，退化到最基本的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">auto max(T1 a, T2 b) -&gt; typename std::decay&lt;decltype(true ? a : b)&gt;::type</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>也可以指定返回类型的默认实参，<a href="https://en.cppreference.com/w/cpp/types/decay" target="_blank" rel="noopener">std::decay_t</a> 能保证不返回引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> RT = <span class="built_in">std</span>::<span class="keyword">decay_t</span>&lt;<span class="keyword">decltype</span>(<span class="literal">true</span> ? T1() : T2())&gt;&gt;</span><br><span class="line">RT <span class="built_in">max</span>(T1 a, T2 b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>C++11提供了 <a href="https://en.cppreference.com/w/cpp/types/common_type" target="_blank" rel="noopener">std::common_type</a> 来确定不同类型中最通用的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="keyword">typename</span> <span class="built_in">std</span>::common_type&lt;T1, T2&gt;::<span class="function">type <span class="title">max</span><span class="params">(T1 a, T2 b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>C++14中能简化这种用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">std::common_type_t&lt;T1, T2&gt; max(T1 a, T2 b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="非模板同名函数重载"><a href="#非模板同名函数重载" class="headerlink" title="非模板同名函数重载"></a>非模板同名函数重载</h2><h3 id="非模板函数必须在模板函数之前可见，不然会直接调用模板函数"><a href="#非模板函数必须在模板函数之前可见，不然会直接调用模板函数" class="headerlink" title="非模板函数必须在模板函数之前可见，不然会直接调用模板函数"></a>非模板函数必须在模板函数之前可见，不然会直接调用模板函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先定义模板函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b, T c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//对三个值调用两次取最大值，此时非模板函数不可见，对于int类型依然调用模板版本</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">max</span>(a, b), c); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span>(<span class="number">1</span>, <span class="number">42</span>);<span class="comment">//此时int max(int, int)可见，调用非模板函数</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">42</span>);<span class="comment">//依旧调用模板函数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-有关函数模板的一些笔记&quot;&gt;&lt;a href=&quot;#C-有关函数模板的一些笔记&quot; class=&quot;headerlink&quot; title=&quot;C++有关函数模板的一些笔记&quot;&gt;&lt;/a&gt;C++有关函数模板的一些笔记&lt;/h1&gt;&lt;h2 id=&quot;模板实参推断&quot;&gt;&lt;a href=&quot;#模板实参推断&quot; class=&quot;headerlink&quot; title=&quot;模板实参推断&quot;&gt;&lt;/a&gt;模板实参推断&lt;/h2&gt;
    
    </summary>
    
    
      <category term="CPP-模板" scheme="https://baka99.com/categories/CPP-%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="CPP-函数模板" scheme="https://baka99.com/tags/CPP-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>非类型模板参数</title>
    <link href="https://baka99.com/2020/04/20/%E9%9D%9E%E7%B1%BB%E5%9E%8B%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0/"/>
    <id>https://baka99.com/2020/04/20/%E9%9D%9E%E7%B1%BB%E5%9E%8B%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0/</id>
    <published>2020-04-21T04:17:50.577Z</published>
    <updated>2020-04-21T04:17:50.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-有关非类型模板参数的一些笔记"><a href="#C-有关非类型模板参数的一些笔记" class="headerlink" title="C++有关非类型模板参数的一些笔记"></a>C++有关非类型模板参数的一些笔记</h1><h2 id="非类型的类模板参数"><a href="#非类型的类模板参数" class="headerlink" title="非类型的类模板参数"></a>非类型的类模板参数</h2><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="built_in">std</span>::<span class="keyword">size_t</span> max_size&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bucket</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    bucket() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curr_size == arr.max_size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(<span class="string">"桶已经满了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[curr_size] = val;</span><br><span class="line">        ++curr_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curr_size == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(<span class="string">"桶已经空了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        --curr_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]] <span class="function">T <span class="title">peek</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[curr_size<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]] <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curr_size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]] <span class="function"><span class="keyword">bool</span> <span class="title">full</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curr_size == arr.max_size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]] <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curr_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;T, max_size&gt; arr&#123;&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> curr_size&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定类型的同时需要指定大小</span></span><br><span class="line">bucket&lt;<span class="keyword">int</span>, <span class="number">20</span>&gt; int_bucket;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    int_bucket.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!int_bucket.empty())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; int_bucket.<span class="built_in">peek</span>() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    int_bucket.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非类型的函数模板参数"><a href="#非类型的函数模板参数" class="headerlink" title="非类型的函数模板参数"></a>非类型的函数模板参数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> pad_val&gt;</span><br><span class="line"><span class="function">T <span class="title">pad</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + pad_val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">pad_vec</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::transform(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), pad_vec.<span class="built_in">begin</span>(), pad&lt;<span class="keyword">int</span>, <span class="number">42</span>&gt;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : pad_vec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>也可以使用推测(推测参照必须出现在推测之前)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">auto</span> pad_val, <span class="keyword">typename</span> T = <span class="keyword">decltype</span>(pad_val)&gt;</span><br><span class="line">T pad(T x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + pad_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>或者指定传值类型相同</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, T pad_val = T&#123;&#125;&gt;</span><br><span class="line">T pad(T x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + pad_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="非类型模板参数限制"><a href="#非类型模板参数限制" class="headerlink" title="非类型模板参数限制"></a>非类型模板参数限制</h2><ul><li>非类型模板参数可以是 <strong>整形，枚举值，只想外部链接的指针</strong></li><li>非类型模板参数不可以是 <strong>浮点数，类对象</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">double</span> pad_val&gt;<span class="comment">// 严重错误，不能是浮点数</span></span><br><span class="line"><span class="function">T <span class="title">pad</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + pad_val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="built_in">std</span>::<span class="built_in">string</span> pad_str&gt;<span class="comment">// 严重错误，不能是类对象</span></span><br><span class="line"><span class="function">T <span class="title">pad</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + pad_str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非类型模板参数不可以是 <strong>字符字面量，临时对象，数据成员，其他子对象的模板实参</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">const</span> <span class="keyword">char</span>* pad_str&gt;</span><br><span class="line"><span class="function">T <span class="title">pad</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + pad_str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = <span class="string">"42"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cc = <span class="string">"42"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> ca[] = <span class="string">"42"</span>;</span><br><span class="line"></span><br><span class="line">str = pad&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="string">"42"</span>&gt;(str);<span class="comment">// 严重错误</span></span><br><span class="line">str = pad&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, cc&gt;(str);<span class="comment">// 严重错误</span></span><br><span class="line">str = pad&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, ca&gt;(str);<span class="comment">// 严重错误</span></span><br></pre></td></tr></table></figure><ul><li><p>C++各个版本对限制都有所放宽</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++11在全局作用域声明external linkage即可</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">char</span> str[] = <span class="string">"42"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++14在全局作用域声明internal linkage也可以</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> str[] = <span class="string">"42"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，必须是 char str[]，如果改为 char*则不可以</span></span><br></pre></td></tr></table></figure></li><li><p>非模板类型参数可以是 <strong>编译期可以获得结果的表达式</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> pad_var = <span class="keyword">sizeof</span>(T)&gt;</span><br><span class="line">T pad(T x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + pad_str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line">i = pad&lt;<span class="keyword">int</span>&gt;(i);</span><br><span class="line">i = pad&lt;<span class="keyword">int</span>, <span class="keyword">sizeof</span>(<span class="keyword">double</span>)&gt;(i);</span><br></pre></td></tr></table></figure><ul><li><p>如果表达式内使用了 &gt; 大于号，则必须对表达式使用()，防止 &gt; 被当作右尖括号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">bool</span> b&gt;</span><br><span class="line"><span class="function">T <span class="title">pad</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + (b ? <span class="keyword">sizeof</span>(T) : <span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line">i = pad&lt;<span class="keyword">int</span>, (<span class="keyword">sizeof</span>(<span class="keyword">double</span>) &gt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>))&gt;(i);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="auto非类型模板参数"><a href="#auto非类型模板参数" class="headerlink" title="auto非类型模板参数"></a>auto非类型模板参数</h2><ul><li>C++17允许使用auto接收任何<strong>允许的非类型模板参数</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">auto</span> max_size&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bucket</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>C++14允许auto作为返回类型</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[nodiscard]] <span class="function"><span class="keyword">auto</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> curr_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是auto依旧不能接收 <strong>const char*</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>  T, <span class="keyword">auto</span> pad_val&gt;</span><br><span class="line"><span class="function">T <span class="title">pad</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + <span class="keyword">sizeof</span>(pad_val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line">i = pad&lt;<span class="keyword">int</span>, <span class="number">42</span>&gt;(i);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-有关非类型模板参数的一些笔记&quot;&gt;&lt;a href=&quot;#C-有关非类型模板参数的一些笔记&quot; class=&quot;headerlink&quot; title=&quot;C++有关非类型模板参数的一些笔记&quot;&gt;&lt;/a&gt;C++有关非类型模板参数的一些笔记&lt;/h1&gt;&lt;h2 id=&quot;非类型的类模板参数&quot;&gt;&lt;a href=&quot;#非类型的类模板参数&quot; class=&quot;headerlink&quot; title=&quot;非类型的类模板参数&quot;&gt;&lt;/a&gt;非类型的类模板参数&lt;/h2&gt;
    
    </summary>
    
    
      <category term="CPP-模板" scheme="https://baka99.com/categories/CPP-%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="CPP-非类型参数模板" scheme="https://baka99.com/tags/CPP-%E9%9D%9E%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
</feed>
