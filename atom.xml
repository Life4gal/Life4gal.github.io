<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abase-Yourself</title>
  
  <subtitle>迷茫的引路人；飘摇的风向标；通透的避风港；破碎的白日梦。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://baka99.com/"/>
  <updated>2020-05-05T11:21:30.076Z</updated>
  <id>https://baka99.com/</id>
  
  <author>
    <name>Life4Gal</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MSVC&amp;MinGW有关虚表实现差异</title>
    <link href="https://baka99.com/2020/05/04/MSVC-MinGW%E6%9C%89%E5%85%B3%E8%99%9A%E8%A1%A8%E5%AE%9E%E7%8E%B0%E5%B7%AE%E5%BC%82/"/>
    <id>https://baka99.com/2020/05/04/MSVC-MinGW%E6%9C%89%E5%85%B3%E8%99%9A%E8%A1%A8%E5%AE%9E%E7%8E%B0%E5%B7%AE%E5%BC%82/</id>
    <published>2020-05-04T20:17:48.000Z</published>
    <updated>2020-05-05T11:21:30.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Inside-The-C-Object-Model"><a href="#Inside-The-C-Object-Model" class="headerlink" title="Inside The C++ Object Model"></a>Inside The C++ Object Model</h2><h3 id="今天看深度探索C-对象模型-Inside-The-C-Object-Model-一书有感，有幸与朋友一起讨论一个关于成员虚函数和虚表的问题，感觉收获颇丰，故记录下来。"><a href="#今天看深度探索C-对象模型-Inside-The-C-Object-Model-一书有感，有幸与朋友一起讨论一个关于成员虚函数和虚表的问题，感觉收获颇丰，故记录下来。" class="headerlink" title="今天看深度探索C++对象模型(Inside The C++ Object Model)一书有感，有幸与朋友一起讨论一个关于成员虚函数和虚表的问题，感觉收获颇丰，故记录下来。"></a>今天看<strong>深度探索C++对象模型(Inside The C++ Object Model)</strong>一书有感，有幸与朋友一起讨论一个关于<strong>成员虚函数</strong>和<strong>虚表</strong>的问题，感觉收获颇丰，故记录下来。</h3><p>我们讨论了两种测试，但其实这两种测试没有什么本质的区别。先上我们讨论的代码:</p><ul><li>Foo类，它有两个<strong>私有的虚函数</strong></li><li><img src="/.com//class_Foo.png" alt></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"using foo1()"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"using foo2()"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>测试1</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Foo foo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> func1 = \</span><br><span class="line">            *(<span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> (Foo::* *)()&gt;(*<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>**&gt;(&amp;foo)) + <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//void (Foo::* func1)() = *(static_cast&lt;void (Foo::* *)()&gt;(*reinterpret_cast&lt;void**&gt;(&amp;foo)) + 0);</span></span><br><span class="line">    <span class="keyword">auto</span> func2 = \</span><br><span class="line">            *(<span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> (Foo::* *)()&gt;(*<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>**&gt;(&amp;foo)) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//void (Foo::* func2)() = *(static_cast&lt;void (Foo::* *)()&gt;(*reinterpret_cast&lt;void**&gt;(&amp;foo)) + 1);</span></span><br><span class="line"></span><br><span class="line">    (<span class="keyword">static_cast</span>&lt;Foo*&gt;(<span class="literal">nullptr</span>)-&gt;*func1)();</span><br><span class="line">    (<span class="keyword">static_cast</span>&lt;Foo*&gt;(<span class="literal">nullptr</span>)-&gt;*func2)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试2</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Foo foo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span>* vptr = <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> (Foo::* *)()&gt;(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>**&gt;(&amp;foo)[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//void (Foo::* *vptr)() = static_cast&lt;void (Foo::* *)()&gt;(reinterpret_cast&lt;void**&gt;(&amp;foo)[0]);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> func1 = vptr[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//void (Foo::* func1)() = vptr[0];</span></span><br><span class="line">    <span class="keyword">auto</span> func2 = vptr[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//void (Foo::* func2)() = vptr[1];</span></span><br><span class="line"></span><br><span class="line">    (<span class="keyword">static_cast</span>&lt;Foo*&gt;(<span class="literal">nullptr</span>)-&gt;*func1)();</span><br><span class="line">    (<span class="keyword">static_cast</span>&lt;Foo*&gt;(<span class="literal">nullptr</span>)-&gt;*func2)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="我们试图通过地址-偏移直接使用Foo的私有虚函数"><a href="#我们试图通过地址-偏移直接使用Foo的私有虚函数" class="headerlink" title="我们试图通过地址+偏移直接使用Foo的私有虚函数"></a>我们试图通过地址+偏移直接使用Foo的私有虚函数</h3><ul><li><p>MinGW</p><ul><li>我们先在MinGW测试，但却遇到了一些问题。</li><li>测试1，我们成功获取到了foo1()并且也正确的调用了，但是foo2()却获取失败<ul><li><img src="/.com//MinGW_func1.png" alt></li></ul></li><li>测试2，我们也成功获取到了foo1()并且也正确的调用了，但是foo2()却获取失败<ul><li><img src="/.com//MinGW_func2.png" alt></li></ul></li></ul></li><li><p>MSVC</p><ul><li>MinGW测试不通，我们就切换到了MSVC进行测试</li><li>测试1，成功获取到foo1()和foo2()<ul><li><img src="/.com//MSVC_func1.png" alt></li></ul></li><li>测试2，成功获取到foo1()和foo2()<ul><li><img src="/.com//MSVC_func2.png" alt></li></ul></li></ul></li><li><p>这就很让人费解了，为什么MinGW测试不通过而MSVC测试通过了呢？只能归结于两款编译器的实现不同吧。</p></li><li><p>最后我们把Foo的虚函数作用域改为public并试图打印它们的地址，发现了一个更神奇的问题。</p><ul><li>MinGW对于两个虚函数的地址如下，居然一模一样。<ul><li><img src="/.com//MinGW_addr.png" alt></li></ul></li><li>MSVC两个虚函数地址正常。<ul><li><img src="/.com//MSVC_addr.png" alt></li></ul></li></ul></li><li><p>想了很久都没想通为什么会有如此差距，虽有遗憾，不过收获也是颇丰。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Inside-The-C-Object-Model&quot;&gt;&lt;a href=&quot;#Inside-The-C-Object-Model&quot; class=&quot;headerlink&quot; title=&quot;Inside The C++ Object Model&quot;&gt;&lt;/a&gt;Inside Th
      
    
    </summary>
    
    
      <category term="博客记录" scheme="https://baka99.com/categories/%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="MSVC&amp;MinGW有关虚表实现差异" scheme="https://baka99.com/tags/MSVC-MinGW%E6%9C%89%E5%85%B3%E8%99%9A%E8%A1%A8%E5%AE%9E%E7%8E%B0%E5%B7%AE%E5%BC%82/"/>
    
  </entry>
  
  <entry>
    <title>Qt-2048</title>
    <link href="https://baka99.com/2020/04/24/Qt-2048/"/>
    <id>https://baka99.com/2020/04/24/Qt-2048/</id>
    <published>2020-04-24T15:06:08.000Z</published>
    <updated>2020-04-25T06:30:31.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qt-2048"><a href="#Qt-2048" class="headerlink" title="Qt-2048"></a>Qt-2048</h2><h3 id="基于Qt的2048小游戏"><a href="#基于Qt的2048小游戏" class="headerlink" title="基于Qt的2048小游戏"></a>基于Qt的2048小游戏</h3><p><a href="https://github.com/Life4gal/CPP-EASY-PROJECT/tree/master/Qt-2048-cmake" target="_blank" rel="noopener">这里是项目地址</a></p><a id="more"></a><p><img src="https://f0.mc.0sm.com/ffsup/images/2020/04/25/1a651173ddb8c8a21.png" alt="预览"></p><p><strong>环境</strong>：</p><ul><li>QT：我用的版本是<strong>Qt5.14.1</strong> + <strong>mingw73_64</strong></li><li>IDE：我使用的是<strong>Clion</strong>(我一般使用CLion + MinGW + cmake开发QT相关项目，由于没使用过MSVC，所以如果你的环境是MSVC，那就需要你自行配置)</li></ul><p><strong>运行</strong>：</p><ul><li>修改<strong>CMakeLists.txt</strong>中的<strong>set(CMAKE_PREFIX_PATH D:/Qt5.14.1/5.14.1/mingw73_64)</strong>，将路径改为你安装的路径，运行即可。</li></ul><p><strong>完成度</strong>：</p><ul><li>运行后游戏即开始，游戏方式为方向键<strong>↑，↓，←，→</strong>，当有砖块数值达到2048时会有提示，但是依然可以继续游戏。</li><li>如果面板被砖块填满并且无法移动会弹出游戏结束窗口，询问是否重新开始。</li><li>已经实现了同时(同步)操作多个游戏窗口(同时运行多个游戏窗口并且每个窗口游戏情况不同)，但是感觉并没有什么必要所以没有并没有实际加入项目实现中。</li><li><strong>AI</strong>，剪枝算法实现AI自动游戏也已经完工，而且AI同时操作多个游戏面板，对每个游戏面板同时评估并且进行下一步的算法也已经完成，但是感觉并没有什么必要所以没有并没有实际加入项目实现中。</li></ul><p>结尾：毕竟这只是个小游戏，做这个游戏的初衷也只是使用Qt + CPP实现一个小程序而已，并不想添加别的什么有关算法的东西，所以虽然相关机制实现了，但是并不打算纳入这个程序中。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Qt-2048&quot;&gt;&lt;a href=&quot;#Qt-2048&quot; class=&quot;headerlink&quot; title=&quot;Qt-2048&quot;&gt;&lt;/a&gt;Qt-2048&lt;/h2&gt;&lt;h3 id=&quot;基于Qt的2048小游戏&quot;&gt;&lt;a href=&quot;#基于Qt的2048小游戏&quot; class=&quot;headerlink&quot; title=&quot;基于Qt的2048小游戏&quot;&gt;&lt;/a&gt;基于Qt的2048小游戏&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Life4gal/CPP-EASY-PROJECT/tree/master/Qt-2048-cmake&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里是项目地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="QT-小程序" scheme="https://baka99.com/categories/QT-%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="QT-2048" scheme="https://baka99.com/tags/QT-2048/"/>
    
  </entry>
  
  <entry>
    <title>工厂与抽象工厂</title>
    <link href="https://baka99.com/2020/04/22/%E5%B7%A5%E5%8E%82%E4%B8%8E%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/"/>
    <id>https://baka99.com/2020/04/22/%E5%B7%A5%E5%8E%82%E4%B8%8E%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</id>
    <published>2020-04-22T11:19:35.000Z</published>
    <updated>2020-04-23T02:21:36.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-有关设计模式的一些笔记"><a href="#C-有关设计模式的一些笔记" class="headerlink" title="C++有关设计模式的一些笔记"></a>C++有关设计模式的一些笔记</h1><h2 id="工厂和抽象工厂"><a href="#工厂和抽象工厂" class="headerlink" title="工厂和抽象工厂"></a>工厂和抽象工厂</h2><p>其实抽象工厂中的每一个创建产品的接口都是一个工厂方法，只不过<strong>工厂方法创建一个产品，而抽象工厂创建一系列产品</strong>。</p><a id="more"></a><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a><strong>抽象工厂</strong></h3><p>一般来说，抽象工厂最简单形态也至少有4个元素：</p><ul><li>客户端（client）</li><li>工厂（factory）</li><li>产品A（product A）</li><li>产品B（product B）</li></ul><p>理解抽象工厂模式的关键在于如何理解“<strong>产品之间特定关系</strong>”。</p><ol><li>用户要调用产品之间的这个特定关系</li><li>这个特定关系只有产品A和产品B之间才有，所以我们需要产品A和产品B</li><li>要获得产品A和产品B，我们要去生产这个产品A和产品B的那个工厂，叫工厂生产这个产品A和产品B</li></ol><p>所以理顺抽象工厂的特点是什么?就是如下几个特点：</p><ul><li>工厂是独立的（独立的类）</li><li>工厂是生产一整套有产品的（至少要生产两个产品)，这些产品<strong>必须相互是有关系或有依赖的</strong></li><li>工厂是可以抽象的，工厂生产是可以抽象的</li><li>产品是可以抽象的，产品关系是可以抽象的</li><li>客户端是用来调用并理顺这些产品之间的关系（或指定工作流程）</li><li>不同工厂生产出的产品实例之间是不接触的，这个是靠客户端来封装实现的。<ul><li>就是客户端加载工厂实例后，保证只使用这个工厂的生产的产品和产品之间的关系，确保不和其他工厂的产品实例进行接触。</li></ul></li></ul><p>最终当我们调用客户端的行为时候，只要让客户端“加载”实例化的特定工厂，返回结果就是这个<strong>“特定工厂</strong>”所加工出来的“<strong>特定产品</strong>”的<strong>“特定关系”</strong>方法的结果了。</p><h4 id="一个常见的抽象工厂如下"><a href="#一个常见的抽象工厂如下" class="headerlink" title="一个常见的抽象工厂如下"></a>一个常见的抽象工厂如下</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ammo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Ammo() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span>  <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ammo762</span> :</span> <span class="keyword">public</span> Ammo</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"using 7.62mm ammo"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ammo556</span> :</span> <span class="keyword">public</span> Ammo</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"using 5.56mm ammo"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gun</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Gun() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">shoot</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AK47</span> :</span> <span class="keyword">public</span> Gun</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shoot</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"AK47 shooting"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"reload 7.62mm ammo"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">M4A1</span> :</span> <span class="keyword">public</span> Gun</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shoot</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"M4A1 shooting"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"reload 5.56mm ammo"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Factory() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Gun&gt; <span class="title">createGun</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Ammo&gt; <span class="title">createAmmo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对于一个阵营来说，生产的枪械和子弹一一对应，但是不同阵营之间的生产方式和结果不相同，而且之间不应该有任何关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTGunFactory</span> :</span> <span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Gun&gt; <span class="title">createGun</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;M4A1&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Ammo&gt; <span class="title">createAmmo</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;Ammo556&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TGunFactory</span> :</span> <span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Gun&gt; <span class="title">createGun</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;AK47&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Ammo&gt; <span class="title">createAmmo</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;Ammo762&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shoot</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        gun-&gt;shoot();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ammo-&gt;use();</span><br><span class="line">        gun-&gt;reload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Human(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Factory&gt; factory) : gun(factory-&gt;createGun()), ammo(factory-&gt;createAmmo()) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Human() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本来应该是 gun 含有成员变量 ammo 的，</span></span><br><span class="line"><span class="comment"> * 但是这样就会导致 createAmmo() 失去意义，</span></span><br><span class="line"><span class="comment"> * 所以这么设计</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Gun&gt; gun;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Ammo&gt; ammo;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> :</span> <span class="keyword">public</span> Human</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> Human::Human;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> gun_type = AK47;</span><br><span class="line">    <span class="keyword">using</span> ammo_type = Ammo762;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CT</span> :</span> <span class="keyword">public</span> Human</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> Human::Human;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> gun_type = M4A1;</span><br><span class="line">    <span class="keyword">using</span> ammo_type = Ammo556;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">auto</span> t = <span class="built_in">std</span>::make_unique&lt;T&gt;(<span class="built_in">std</span>::make_unique&lt;TGunFactory&gt;());</span><br><span class="line"><span class="keyword">auto</span> ct = <span class="built_in">std</span>::make_unique&lt;CT&gt;(<span class="built_in">std</span>::make_unique&lt;CTGunFactory&gt;());</span><br><span class="line"></span><br><span class="line">t-&gt;shoot();</span><br><span class="line">t-&gt;reload();</span><br><span class="line"></span><br><span class="line">ct-&gt;shoot();</span><br><span class="line">ct-&gt;reload();</span><br></pre></td></tr></table></figure><h3 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h3><p>工厂方法就两个元素：</p><ul><li>creator（创建者）</li><li>product（产品）</li></ul><h4 id="一个常见的工厂如下"><a href="#一个常见的工厂如下" class="headerlink" title="一个常见的工厂如下"></a>一个常见的工厂如下</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~Product() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> :</span> <span class="keyword">public</span> Product</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"use product A"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> :</span> <span class="keyword">public</span> Product</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> type = ProductB;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"use product B"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>  product&gt;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;product&gt; <span class="title">createProduct</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::make_shared&lt;product&gt;();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建工厂</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> factory = <span class="built_in">std</span>::make_unique&lt;Factory&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> product_a = factory-&gt;createProduct&lt;ProductA&gt;();</span><br><span class="line">product_a-&gt;use();</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> product_b = factory-&gt;createProduct&lt;ProductB&gt;();</span><br><span class="line">product_b-&gt;use();</span><br></pre></td></tr></table></figure><h3 id="抽象工厂和工厂方法不同点"><a href="#抽象工厂和工厂方法不同点" class="headerlink" title="抽象工厂和工厂方法不同点"></a>抽象工厂和工厂方法不同点</h3><ul><li><p>抽象工厂关键在于产品之间的抽象关系，所以至少要两个产品；工厂方法在于生成产品，不关注产品间的关系，所以可以只生成一个产品。</p></li><li><p>抽象工厂中客户端把产品的抽象关系理清楚，在最终使用的时候，一般使用客户端（和其接口），产品之间的关系是被封装固定的；而工厂方法是在最终使用的时候，使用产品本身（和其接口）。</p></li><li><p>抽象工厂更像一个复杂版本的策略模式，策略模式通过更换策略来改变处理方式或者结果；而抽象工厂的客户端，通过更改工厂还改变结果。所以在使用的时候，就使用客户端和更换工厂，而看不到产品本身。</p></li><li><p>工厂方法目的是生产产品，所以能看到产品，而且还要使用产品。当然，如果产品在创建者内部使用，那么工厂方法就是为了完善创建者，从而可以使用创建者。另外创建者本身是不能更换所生产产品的。</p></li><li><p>抽象工厂的工厂是类；工厂方法的工厂是方法。</p><ul><li>抽象工厂的工厂类就做一件事情生产产品。生产的产品给客户端使用，绝不给自己用。</li><li>工厂方法生产产品，可以给系统用，可以给客户端用，也可以自己这个类使用。自己这个类除了这个工厂方法外，还能有其他功能性的方法</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-有关设计模式的一些笔记&quot;&gt;&lt;a href=&quot;#C-有关设计模式的一些笔记&quot; class=&quot;headerlink&quot; title=&quot;C++有关设计模式的一些笔记&quot;&gt;&lt;/a&gt;C++有关设计模式的一些笔记&lt;/h1&gt;&lt;h2 id=&quot;工厂和抽象工厂&quot;&gt;&lt;a href=&quot;#工厂和抽象工厂&quot; class=&quot;headerlink&quot; title=&quot;工厂和抽象工厂&quot;&gt;&lt;/a&gt;工厂和抽象工厂&lt;/h2&gt;&lt;p&gt;其实抽象工厂中的每一个创建产品的接口都是一个工厂方法，只不过&lt;strong&gt;工厂方法创建一个产品，而抽象工厂创建一系列产品&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CPP-设计模式" scheme="https://baka99.com/categories/CPP-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="CPP-工厂与抽象工厂" scheme="https://baka99.com/tags/CPP-%E5%B7%A5%E5%8E%82%E4%B8%8E%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/"/>
    
  </entry>
  
  <entry>
    <title>可变参数模板</title>
    <link href="https://baka99.com/2020/04/20/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
    <id>https://baka99.com/2020/04/20/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-04-20T18:14:45.000Z</published>
    <updated>2020-04-21T09:16:22.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-有关类模板的一些笔记"><a href="#C-有关类模板的一些笔记" class="headerlink" title="C++有关类模板的一些笔记"></a>C++有关类模板的一些笔记</h1><h2 id="可变参数模板示例"><a href="#可变参数模板示例" class="headerlink" title="可变参数模板示例"></a>可变参数模板示例</h2><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般来说称含有多个参数的参数集合为"包"</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... pack&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, pack... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">print</span>(x);<span class="comment">// 对一个参数调用单参数模板函数</span></span><br><span class="line"><span class="built_in">print</span>(args...);<span class="comment">// 对超过一个参数的参数包调用多参数函数模板</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">s1</span><span class="params">(<span class="string">"42"</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"3.14"</span>)</span></span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cc = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, s1, s2, cc, <span class="string">"string"</span>);</span><br></pre></td></tr></table></figure><h2 id="sizeof…运算符"><a href="#sizeof…运算符" class="headerlink" title="sizeof…运算符"></a><a href="https://en.cppreference.com/w/cpp/language/sizeof..." target="_blank" rel="noopener">sizeof…</a>运算符</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... pack&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, pack... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">sizeof</span>...(pack));</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">sizeof</span>...(args));<span class="comment">// sizeof...(pack)和sizeof...(args)是一样的</span></span><br><span class="line"><span class="built_in">print</span>(args...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意，无法通过使用sizeof…()判断参数个数来结束递归</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... pack&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, pack... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">sizeof</span>...(args) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">print</span>(args...);<span class="comment">// 编译错误，“void print(T,pack...)”: 应输入 2 个参数(实际上是1个，因为参数包可以为空)，却提供了 0 个</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个逻辑问题，即使某个函数在运行期不会调用到，编译期也依然要获得这个函数的完整定义</span></span><br><span class="line"><span class="comment">// 所以当只有一个参数时，sizeof...(args)虽然是0，但依旧会初始化print()，然而print()的调用需要两个参数(实际上是1个，因为参数包可以为空)</span></span><br></pre></td></tr></table></figure><ul><li>C++17引入了编译期if来解决这个问题</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... pack&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, pack... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(<span class="keyword">sizeof</span>...(args) &gt; <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">print</span>(args...);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="折叠表达式"><a href="#折叠表达式" class="headerlink" title="折叠表达式"></a><a href="https://en.cppreference.com/w/cpp/language/fold" target="_blank" rel="noopener">折叠表达式</a></h2><ul><li>C++17引入了折叠表达式，用于获取对所有参数包实参使用的二元运算符的计算结果</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 包 + 二元运算符 + ...</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">foldSum</span><span class="params">(T... s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (... + s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> sum = foldSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 相当于((((1 + 2) + 3) + 4) + 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... + 二元运算符 + 包</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">foldSum</span><span class="params">(T... s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (s + ...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> sum = foldSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 相当于(1 + (2 + (3 + (4 + 5))))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始值 + 二元操作符 + ... + 二元操作符 + 包</span></span><br><span class="line"><span class="comment">// 两个二元操作符必须相同</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> pad, <span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">foldPad</span><span class="params">(T... s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (pad * ... * s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> sum = foldPad&lt;<span class="number">10</span>&gt;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">// 相当于(((((10 * 1) * 2) * 3) * 4) * 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包 + 二元操作符 + ... + 二元操作符 + 初始值</span></span><br><span class="line"><span class="comment">// 两个二元操作符必须相同</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> pad, <span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">foldPad</span><span class="params">(T... s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (s * ... * pad);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> sum = foldPad&lt;<span class="number">10</span>&gt;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">// 相当于(10 * (1 * (2 * (3 * (4 * 5)))))</span></span><br></pre></td></tr></table></figure><ul><li><p>折叠表达式几乎可以用于所有的二元表达式，如果参数包为空，表达式通常不合法(例外：&amp;&amp;视为true，||视为false，逗号视为void())</p><ul><li><p><strong>-&gt;*</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Node* left;</span><br><span class="line">    Node* right;</span><br><span class="line">    Node(<span class="keyword">int</span> v) : val(v), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">~Node()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> left;</span><br><span class="line">        <span class="keyword">delete</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _root, <span class="keyword">typename</span>... _path&gt;</span><br><span class="line"><span class="function">Node* <span class="title">traverse</span><span class="params">(_root root, _path... paths)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (root -&gt;* ...-&gt;* paths);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node* root = <span class="keyword">new</span> Node( <span class="number">0</span> );</span><br><span class="line">root-&gt;left = <span class="keyword">new</span> Node( <span class="number">7</span> );</span><br><span class="line">root-&gt;left-&gt;left = <span class="keyword">new</span> Node( <span class="number">21</span> );</span><br><span class="line">root-&gt;left-&gt;left-&gt;left = <span class="keyword">new</span> Node( <span class="number">42</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> left = &amp;Node::left;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> right = &amp;Node::right;</span><br><span class="line">Node* node1 = traverse(root, left);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node1-&gt;val &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;   <span class="comment">// 7</span></span><br><span class="line">Node* node2 = traverse(root, left, left);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node2-&gt;val &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">Node* node3 = traverse(node2, left);    <span class="comment">// 21</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node3-&gt;val &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;   <span class="comment">// 41</span></span><br></pre></td></tr></table></figure></li><li><p><strong>&lt;&lt;</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream&amp; os, <span class="keyword">const</span> T&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">(os &lt;&lt; ... &lt;&lt; args) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="number">1</span>, <span class="number">42</span>, <span class="string">"hello"</span>, <span class="string">"42"</span>, <span class="string">"string"</span>);<span class="comment">// 142hello42string</span></span><br></pre></td></tr></table></figure></li><li><p>如果想要在二元操作符之间添加别的操作则需要对参数包进行包装</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wrap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">wrap(<span class="keyword">const</span> T&amp; r) : ref(r) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span>  <span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream&amp; os, wrap&lt;T&gt; w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> os &lt;&lt; <span class="string">"[ "</span> &lt;&lt; w.ref &lt;&lt; <span class="string">" ]\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">const</span> T&amp; ref;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream&amp; os, <span class="keyword">const</span> T&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">(os &lt;&lt; ... &lt;&lt; wrap(args)) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="number">1</span>, <span class="number">42</span>, <span class="string">"hello"</span>, <span class="string">"42"</span>, <span class="string">"string"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[ 1 ]</span></span><br><span class="line"><span class="comment">[ 42 ]</span></span><br><span class="line"><span class="comment">[ hello ]</span></span><br><span class="line"><span class="comment">[ 42 ]</span></span><br><span class="line"><span class="comment">[ string ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="可变参模板的应用"><a href="#可变参模板的应用" class="headerlink" title="可变参模板的应用"></a>可变参模板的应用</h2><ul><li>标准库 <a href="https://en.cppreference.com/w/cpp/memory/shared_ptr/make_shared" target="_blank" rel="noopener">std::make_shared</a> 的实现</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RGB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> red;</span><br><span class="line"><span class="keyword">int</span> green;</span><br><span class="line"><span class="keyword">int</span> blue;</span><br><span class="line">RGB(<span class="keyword">int</span> r, <span class="keyword">int</span> g, <span class="keyword">int</span> b) : red(r), green(g), blue(b) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RGBA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> red;</span><br><span class="line"><span class="keyword">int</span> green;</span><br><span class="line"><span class="keyword">int</span> blue;</span><br><span class="line"><span class="keyword">int</span> alpha;</span><br><span class="line">RGBA(<span class="keyword">int</span> r, <span class="keyword">int</span> g, <span class="keyword">int</span> b, <span class="keyword">int</span> a) : red(r), green(g), blue(b), alpha(a) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> rgb = <span class="built_in">std</span>::make_shared&lt;RGB&gt;(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="keyword">auto</span> rgba = <span class="built_in">std</span>::make_shared&lt;RGBA&gt;(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>标准库 <a href="https://en.cppreference.com/w/cpp/thread/thread/thread" target="_blank" rel="noopener">std::thread</a> 的构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b, <span class="keyword">char</span> c, <span class="keyword">const</span> <span class="keyword">char</span>* d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span> &lt;&lt; b &lt;&lt; <span class="string">' '</span> &lt;&lt; c &lt;&lt; <span class="string">' '</span> &lt;&lt; d &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">thread1</span><span class="params">(foo, <span class="number">1</span>, <span class="number">3.14</span>, <span class="string">'1'</span>, <span class="string">"42"</span>)</span></span>;</span><br><span class="line">thread1.join();</span><br></pre></td></tr></table></figure><ul><li>标准库 <a href="https://en.cppreference.com/w/cpp/container/vector/emplace_back" target="_blank" rel="noopener">std::vector::emplace_back</a> 的实现</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RGB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> red;</span><br><span class="line"><span class="keyword">int</span> green;</span><br><span class="line"><span class="keyword">int</span> blue;</span><br><span class="line">RGB(<span class="keyword">int</span> r, <span class="keyword">int</span> g, <span class="keyword">int</span> b) : red(r), green(g), blue(b) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;RGB&gt; vec;</span><br><span class="line">vec.emplace_back(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>这些函数或是类通常可以容纳各种类型，所以需要实现使用各种类型的构造函数等</li></ul><h2 id="可变参数表达式"><a href="#可变参数表达式" class="headerlink" title="可变参数表达式"></a>可变参数表达式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wrap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">wrap(<span class="keyword">const</span> T&amp; r) : ref(r) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span>  <span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream&amp; os, wrap&lt;T&gt; w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> os &lt;&lt; <span class="string">"[ "</span> &lt;&lt; w.ref &lt;&lt; <span class="string">" ]\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">const</span> T&amp; ref;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream&amp; os, <span class="keyword">const</span> T&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">(os &lt;&lt; ... &lt;&lt; wrap(args)) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doublePrint</span><span class="params">(<span class="built_in">std</span>::ostream&amp; os, <span class="keyword">const</span> T&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">print</span>(os, args + args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doublePrint(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="number">1</span>, <span class="number">3.14</span>, <span class="number">42</span>, <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"21"</span>), <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"42"</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[ 2 ]</span></span><br><span class="line"><span class="comment">[ 6.28 ]</span></span><br><span class="line"><span class="comment">[ 84 ]</span></span><br><span class="line"><span class="comment">[ 2121 ]</span></span><br><span class="line"><span class="comment">[ 4242 ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>注意<strong>…不能跟在数字后面</strong>，中间间隔一个空格</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream&amp; os, <span class="keyword">const</span> T&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">(os &lt;&lt; ... &lt;&lt; wrap(args)) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os, args + <span class="number">1</span> ...);<span class="comment">// OK</span></span><br><span class="line"><span class="built_in">print</span>(os, args + <span class="number">1.</span>..);<span class="comment">// 严重错误</span></span><br></pre></td></tr></table></figure><h3 id="编译器表达式依然可以包含可变参数"><a href="#编译器表达式依然可以包含可变参数" class="headerlink" title="编译器表达式依然可以包含可变参数"></a>编译器表达式依然可以包含可变参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... pack&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">bool</span> <span class="title">isHomogeneous</span><span class="params">(T, pack...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">std</span>::is_same_v&lt;T, pack&gt; &amp;&amp; ...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; isHomogeneous(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; isHomogeneous(<span class="number">1</span>, <span class="string">"42"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; isHomogeneous(<span class="string">"1"</span>, <span class="string">"3.14"</span>, <span class="string">"42"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="可变参数配合容器"><a href="#可变参数配合容器" class="headerlink" title="可变参数配合容器"></a>可变参数配合容器</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wrap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">wrap(<span class="keyword">const</span> T&amp; r) : ref(r) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span>  <span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream&amp; os, wrap&lt;T&gt; w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> os &lt;&lt; <span class="string">"[ "</span> &lt;&lt; w.ref &lt;&lt; <span class="string">" ]\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">const</span> T&amp; ref;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream&amp; os, <span class="keyword">const</span> T&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">(os &lt;&lt; ... &lt;&lt; wrap(args)) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">size_t</span>... indices, <span class="class"><span class="keyword">class</span> <span class="title">Container</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">indexPrint</span>(<span class="title">std</span>:</span>:ostream&amp; os, <span class="keyword">const</span> Container&amp; c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">print</span>(os, c[indices]...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; vec&#123; <span class="string">"1"</span>, <span class="string">"21"</span>, <span class="string">"42"</span>, <span class="string">"hello"</span>, <span class="string">"world"</span> &#125;;</span><br><span class="line">indexPrint&lt;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&gt;(<span class="built_in">std</span>::<span class="built_in">cout</span>, vec);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[ 1 ]</span></span><br><span class="line"><span class="comment">[ 42 ]</span></span><br><span class="line"><span class="comment">[ hello ]</span></span><br><span class="line"><span class="comment">[ 21 ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="C-17可变数量基类"><a href="#C-17可变数量基类" class="headerlink" title="C++17可变数量基类"></a>C++17可变数量基类</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base_equal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> lhs, <span class="keyword">int</span> rhs)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> lhs == rhs;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base_output</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> val&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">Bases</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">derive</span> :</span> Bases...</span><br><span class="line">&#123;</span><br><span class="line">using Bases::operator()...;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">derive&lt;Base_equal, Base_output&gt; d;</span><br><span class="line">d.val = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base_equal</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; d(<span class="number">1</span>, <span class="number">42</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// Base_output</span></span><br><span class="line">d();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-有关类模板的一些笔记&quot;&gt;&lt;a href=&quot;#C-有关类模板的一些笔记&quot; class=&quot;headerlink&quot; title=&quot;C++有关类模板的一些笔记&quot;&gt;&lt;/a&gt;C++有关类模板的一些笔记&lt;/h1&gt;&lt;h2 id=&quot;可变参数模板示例&quot;&gt;&lt;a href=&quot;#可变参数模板示例&quot; class=&quot;headerlink&quot; title=&quot;可变参数模板示例&quot;&gt;&lt;/a&gt;可变参数模板示例&lt;/h2&gt;
    
    </summary>
    
    
      <category term="CPP-模板" scheme="https://baka99.com/categories/CPP-%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="CPP-可变参数模板" scheme="https://baka99.com/tags/CPP-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>非类型模板参数</title>
    <link href="https://baka99.com/2020/04/19/%E9%9D%9E%E7%B1%BB%E5%9E%8B%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0/"/>
    <id>https://baka99.com/2020/04/19/%E9%9D%9E%E7%B1%BB%E5%9E%8B%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0/</id>
    <published>2020-04-20T05:34:28.000Z</published>
    <updated>2020-04-21T05:11:51.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-有关非类型模板参数的一些笔记"><a href="#C-有关非类型模板参数的一些笔记" class="headerlink" title="C++有关非类型模板参数的一些笔记"></a>C++有关非类型模板参数的一些笔记</h1><h2 id="非类型的类模板参数"><a href="#非类型的类模板参数" class="headerlink" title="非类型的类模板参数"></a>非类型的类模板参数</h2><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="built_in">std</span>::<span class="keyword">size_t</span> max_size&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bucket</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    bucket() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curr_size == arr.max_size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(<span class="string">"桶已经满了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[curr_size] = val;</span><br><span class="line">        ++curr_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curr_size == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(<span class="string">"桶已经空了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        --curr_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]] <span class="function">T <span class="title">peek</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[curr_size<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]] <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curr_size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]] <span class="function"><span class="keyword">bool</span> <span class="title">full</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curr_size == arr.max_size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]] <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curr_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;T, max_size&gt; arr&#123;&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> curr_size&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定类型的同时需要指定大小</span></span><br><span class="line">bucket&lt;<span class="keyword">int</span>, <span class="number">20</span>&gt; int_bucket;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    int_bucket.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!int_bucket.empty())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; int_bucket.<span class="built_in">peek</span>() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    int_bucket.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非类型的函数模板参数"><a href="#非类型的函数模板参数" class="headerlink" title="非类型的函数模板参数"></a>非类型的函数模板参数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> pad_val&gt;</span><br><span class="line"><span class="function">T <span class="title">pad</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + pad_val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">pad_vec</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::transform(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), pad_vec.<span class="built_in">begin</span>(), pad&lt;<span class="keyword">int</span>, <span class="number">42</span>&gt;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : pad_vec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>也可以使用推测(推测参照必须出现在推测之前)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">auto</span> pad_val, <span class="keyword">typename</span> T = <span class="keyword">decltype</span>(pad_val)&gt;</span><br><span class="line">T pad(T x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + pad_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>或者指定传值类型相同</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, T pad_val = T&#123;&#125;&gt;</span><br><span class="line">T pad(T x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + pad_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="非类型模板参数限制"><a href="#非类型模板参数限制" class="headerlink" title="非类型模板参数限制"></a>非类型模板参数限制</h2><ul><li>非类型模板参数可以是 <strong>整形，枚举值，只想外部链接的指针</strong></li><li>非类型模板参数不可以是 <strong>浮点数，类对象</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">double</span> pad_val&gt;<span class="comment">// 严重错误，不能是浮点数</span></span><br><span class="line"><span class="function">T <span class="title">pad</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + pad_val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="built_in">std</span>::<span class="built_in">string</span> pad_str&gt;<span class="comment">// 严重错误，不能是类对象</span></span><br><span class="line"><span class="function">T <span class="title">pad</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + pad_str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非类型模板参数不可以是 <strong>字符字面量，临时对象，数据成员，其他子对象的模板实参</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">const</span> <span class="keyword">char</span>* pad_str&gt;</span><br><span class="line"><span class="function">T <span class="title">pad</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + pad_str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = <span class="string">"42"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cc = <span class="string">"42"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> ca[] = <span class="string">"42"</span>;</span><br><span class="line"></span><br><span class="line">str = pad&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="string">"42"</span>&gt;(str);<span class="comment">// 严重错误</span></span><br><span class="line">str = pad&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, cc&gt;(str);<span class="comment">// 严重错误</span></span><br><span class="line">str = pad&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, ca&gt;(str);<span class="comment">// 严重错误</span></span><br></pre></td></tr></table></figure><ul><li><p>C++各个版本对限制都有所放宽</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++11在全局作用域声明external linkage即可</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">char</span> str[] = <span class="string">"42"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++14在全局作用域声明internal linkage也可以</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> str[] = <span class="string">"42"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，必须是 char str[]，如果改为 char*则不可以</span></span><br></pre></td></tr></table></figure></li><li><p>非模板类型参数可以是 <strong>编译期可以获得结果的表达式</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> pad_var = <span class="keyword">sizeof</span>(T)&gt;</span><br><span class="line">T pad(T x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + pad_str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line">i = pad&lt;<span class="keyword">int</span>&gt;(i);</span><br><span class="line">i = pad&lt;<span class="keyword">int</span>, <span class="keyword">sizeof</span>(<span class="keyword">double</span>)&gt;(i);</span><br></pre></td></tr></table></figure><ul><li><p>如果表达式内使用了 &gt; 大于号，则必须对表达式使用()，防止 &gt; 被当作右尖括号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">bool</span> b&gt;</span><br><span class="line"><span class="function">T <span class="title">pad</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + (b ? <span class="keyword">sizeof</span>(T) : <span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line">i = pad&lt;<span class="keyword">int</span>, (<span class="keyword">sizeof</span>(<span class="keyword">double</span>) &gt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>))&gt;(i);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="auto非类型模板参数"><a href="#auto非类型模板参数" class="headerlink" title="auto非类型模板参数"></a>auto非类型模板参数</h2><ul><li>C++17允许使用auto接收任何<strong>允许的非类型模板参数</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">auto</span> max_size&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bucket</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>C++14允许auto作为返回类型</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[nodiscard]] <span class="function"><span class="keyword">auto</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> curr_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是auto依旧不能接收 <strong>const char*</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>  T, <span class="keyword">auto</span> pad_val&gt;</span><br><span class="line"><span class="function">T <span class="title">pad</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + <span class="keyword">sizeof</span>(pad_val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line">i = pad&lt;<span class="keyword">int</span>, <span class="number">42</span>&gt;(i);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-有关非类型模板参数的一些笔记&quot;&gt;&lt;a href=&quot;#C-有关非类型模板参数的一些笔记&quot; class=&quot;headerlink&quot; title=&quot;C++有关非类型模板参数的一些笔记&quot;&gt;&lt;/a&gt;C++有关非类型模板参数的一些笔记&lt;/h1&gt;&lt;h2 id=&quot;非类型的类模板参数&quot;&gt;&lt;a href=&quot;#非类型的类模板参数&quot; class=&quot;headerlink&quot; title=&quot;非类型的类模板参数&quot;&gt;&lt;/a&gt;非类型的类模板参数&lt;/h2&gt;
    
    </summary>
    
    
      <category term="CPP-模板" scheme="https://baka99.com/categories/CPP-%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="CPP-非类型参数模板" scheme="https://baka99.com/tags/CPP-%E9%9D%9E%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>函数模板</title>
    <link href="https://baka99.com/2020/04/19/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
    <id>https://baka99.com/2020/04/19/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-04-19T14:05:41.000Z</published>
    <updated>2020-04-21T05:12:02.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-有关函数模板的一些笔记"><a href="#C-有关函数模板的一些笔记" class="headerlink" title="C++有关函数模板的一些笔记"></a>C++有关函数模板的一些笔记</h1><h2 id="模板实参推断"><a href="#模板实参推断" class="headerlink" title="模板实参推断"></a>模板实参推断</h2><a id="more"></a><h3 id="模板参数不允许隐式转换，这表示你必须保证你传入模板函数的参数必须匹配"><a href="#模板参数不允许隐式转换，这表示你必须保证你传入模板函数的参数必须匹配" class="headerlink" title="模板参数不允许隐式转换，这表示你必须保证你传入模板函数的参数必须匹配"></a><strong>模板参数不允许隐式转换</strong>，这表示你必须保证你传入模板函数的参数<strong>必须</strong>匹配</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span>(<span class="string">"hello"</span>, s);<span class="comment">// 严重错误，不允许将const char[6]转换为std::string或是将std::string转换为const char[6]</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">1</span>, <span class="number">42</span>);<span class="comment">//调用int max(int, int)</span></span><br><span class="line"><span class="built_in">max</span>(<span class="string">'1'</span>, <span class="number">42</span>);<span class="comment">//依旧调用int max(int, int)，因为模板函数不允许隐式转换</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">1.0</span>, <span class="number">42.0</span>);<span class="comment">//调用模板，推断为double max(double, double)</span></span><br><span class="line"><span class="built_in">max</span>(<span class="string">'1'</span>, <span class="string">'2'</span>);<span class="comment">//调用模板，推断为char max(char, char)</span></span><br><span class="line"><span class="built_in">max</span>&lt;&gt;(<span class="number">1</span>, <span class="number">42</span>);<span class="comment">//显式指定调用模板函数特例int max(int, int)</span></span><br></pre></td></tr></table></figure><h3 id="const-amp-volatile-限定符将被忽略，数组或者函数将转换为指针"><a href="#const-amp-volatile-限定符将被忽略，数组或者函数将转换为指针" class="headerlink" title="const &amp; volatile 限定符将被忽略，数组或者函数将转换为指针"></a>const &amp; volatile 限定符将被忽略，数组或者函数将转换为指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> b = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span>&amp; c = b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span>(a, b);<span class="comment">// T推断为int</span></span><br><span class="line"><span class="built_in">max</span>(b, b);<span class="comment">// T推断为int</span></span><br><span class="line"><span class="built_in">max</span>(a, c);<span class="comment">// T推断为int(c的const限定符被忽略)</span></span><br><span class="line"><span class="built_in">max</span>(&amp;a, arr);<span class="comment">// T被推断为int*</span></span><br></pre></td></tr></table></figure><h3 id="解决不匹配方法"><a href="#解决不匹配方法" class="headerlink" title="解决不匹配方法"></a>解决不匹配方法</h3><ul><li>显式转换参数类型：<strong>max(3.14， static_cast<double>(42))</double></strong></li><li>指定T：<strong>max<double>(1, 3.14)</double></strong></li><li>显式要求使用模板：<strong>max&lt;&gt;(1, 42)</strong></li><li>用两个模板参数指定不同类型：<strong>template&lt;typename T1, typename T2&gt;</strong></li></ul><h2 id="模板返回值类型"><a href="#模板返回值类型" class="headerlink" title="模板返回值类型"></a>模板返回值类型</h2><h3 id="模板函数的返回值类型不能被推断，必须显式指定"><a href="#模板函数的返回值类型不能被推断，必须显式指定" class="headerlink" title="模板函数的返回值类型不能被推断，必须显式指定"></a>模板函数的返回值类型不能被推断，必须显式指定</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function">RT <span class="title">max</span><span class="params">(T1 a, T2 b)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span>(<span class="number">3.14</span>, <span class="number">42</span>);<span class="comment">// 严重错误，无法判断返回值类型</span></span><br><span class="line"><span class="built_in">max</span>&lt;<span class="keyword">double</span>&gt;(<span class="number">3.14</span>, <span class="number">42</span>);<span class="comment">// 显式指定返回类型为double, T1和T2被推断</span></span><br></pre></td></tr></table></figure><blockquote><p>C++14允许auto作为返回类型，它通过return语句推断返回类型</p></blockquote><h3 id="如果无法指定返回值类型，可以使用以下方法获得"><a href="#如果无法指定返回值类型，可以使用以下方法获得" class="headerlink" title="如果无法指定返回值类型，可以使用以下方法获得"></a>如果无法指定返回值类型，可以使用以下方法获得</h3><ul><li><p>尾置返回值类型(C++ 11)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">auto max(T1 a, T2 b) -&gt; decltype(a &gt; b ? a : b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的写法是一样的</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">auto max(T1 a, T2 b) -&gt; decltype(true ? a : b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果T必须是引用，上述方法则会引发 run-time error，返回一个局部引用，此时可以使用 <a href="https://en.cppreference.com/w/cpp/types/decay" target="_blank" rel="noopener">std::decay</a> 去掉<strong>CV限定符</strong>，退化到最基本的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">auto max(T1 a, T2 b) -&gt; typename std::decay&lt;decltype(true ? a : b)&gt;::type</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>也可以指定返回类型的默认实参，<a href="https://en.cppreference.com/w/cpp/types/decay" target="_blank" rel="noopener">std::decay_t</a> 能保证不返回引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> RT = <span class="built_in">std</span>::<span class="keyword">decay_t</span>&lt;<span class="keyword">decltype</span>(<span class="literal">true</span> ? T1() : T2())&gt;&gt;</span><br><span class="line">RT <span class="built_in">max</span>(T1 a, T2 b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>C++11提供了 <a href="https://en.cppreference.com/w/cpp/types/common_type" target="_blank" rel="noopener">std::common_type</a> 来确定不同类型中最通用的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="keyword">typename</span> <span class="built_in">std</span>::common_type&lt;T1, T2&gt;::<span class="function">type <span class="title">max</span><span class="params">(T1 a, T2 b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>C++14中能简化这种用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">std::common_type_t&lt;T1, T2&gt; max(T1 a, T2 b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="非模板同名函数重载"><a href="#非模板同名函数重载" class="headerlink" title="非模板同名函数重载"></a>非模板同名函数重载</h2><h3 id="非模板函数必须在模板函数之前可见，不然会直接调用模板函数"><a href="#非模板函数必须在模板函数之前可见，不然会直接调用模板函数" class="headerlink" title="非模板函数必须在模板函数之前可见，不然会直接调用模板函数"></a>非模板函数必须在模板函数之前可见，不然会直接调用模板函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先定义模板函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b, T c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//对三个值调用两次取最大值，此时非模板函数不可见，对于int类型依然调用模板版本</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">max</span>(a, b), c); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span>(<span class="number">1</span>, <span class="number">42</span>);<span class="comment">//此时int max(int, int)可见，调用非模板函数</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">42</span>);<span class="comment">//依旧调用模板函数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-有关函数模板的一些笔记&quot;&gt;&lt;a href=&quot;#C-有关函数模板的一些笔记&quot; class=&quot;headerlink&quot; title=&quot;C++有关函数模板的一些笔记&quot;&gt;&lt;/a&gt;C++有关函数模板的一些笔记&lt;/h1&gt;&lt;h2 id=&quot;模板实参推断&quot;&gt;&lt;a href=&quot;#模板实参推断&quot; class=&quot;headerlink&quot; title=&quot;模板实参推断&quot;&gt;&lt;/a&gt;模板实参推断&lt;/h2&gt;
    
    </summary>
    
    
      <category term="CPP-模板" scheme="https://baka99.com/categories/CPP-%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="CPP-函数模板" scheme="https://baka99.com/tags/CPP-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>类模板</title>
    <link href="https://baka99.com/2020/04/18/%E7%B1%BB%E6%A8%A1%E6%9D%BF/"/>
    <id>https://baka99.com/2020/04/18/%E7%B1%BB%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-04-19T05:37:42.000Z</published>
    <updated>2020-04-21T05:12:22.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-有关类模板的一些笔记"><a href="#C-有关类模板的一些笔记" class="headerlink" title="C++有关类模板的一些笔记"></a>C++有关类模板的一些笔记</h1><h2 id="类模板示例"><a href="#类模板示例" class="headerlink" title="类模板示例"></a>类模板示例</h2><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="class"><span class="keyword">class</span> <span class="title">Container</span> = <span class="title">std</span>:</span>:<span class="built_in">deque</span>&lt;T&gt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> value_type = <span class="keyword">typename</span> Container::value_type;</span><br><span class="line"><span class="keyword">using</span> reference = <span class="keyword">typename</span> Container::reference;</span><br><span class="line"><span class="keyword">using</span> const_reference = <span class="keyword">typename</span> Container::const_reference;</span><br><span class="line"><span class="keyword">using</span> size_type = <span class="keyword">typename</span> Container::size_type;</span><br><span class="line"><span class="keyword">using</span> container_type = Container;</span><br><span class="line"></span><br><span class="line">myStack() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(<span class="keyword">const</span> container_type&amp; container)</span> : <span class="title">c</span><span class="params">(container)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(container_type&amp;&amp; container)</span> <span class="keyword">noexcept</span> : <span class="title">c</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">move</span>(container))</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(<span class="keyword">const</span> myStack&lt;value_type&gt;&amp; other)</span> : <span class="title">c</span><span class="params">(other.c)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(myStack&lt;value_type&gt;&amp;&amp; other)</span> <span class="keyword">noexcept</span> : <span class="title">c</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">move</span>(other.c))</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">[[nodiscard]] <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[nodiscard]] <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[nodiscard]] <span class="function">reference <span class="title">top</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[nodiscard]] <span class="function">const_reference <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> value_type&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c.push_back(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(value_type&amp;&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c.push_back(<span class="built_in">std</span>::<span class="built_in">move</span>(val));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ... val_type&gt;</span><br><span class="line"><span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">emplace</span><span class="params">(val_type&amp;&amp;... val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.emplace_back(<span class="built_in">std</span>::forward&lt;val_type&gt;(val)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(myStack&amp; other)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::swap(c, other.c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[nodiscard]] <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; lhs, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> lhs.c == rhs.c;</span><br><span class="line">&#125;</span><br><span class="line">[[nodiscard]] <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; lhs, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="keyword">operator</span>==(<span class="built_in">std</span>::forward&lt;<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp;&gt;(lhs), <span class="built_in">std</span>::forward&lt;<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp;&gt;(rhs));</span><br><span class="line">&#125;</span><br><span class="line">[[nodiscard]] <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; lhs, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> lhs.c &lt; rhs.c;</span><br><span class="line">&#125;</span><br><span class="line">[[nodiscard]] <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; lhs, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> lhs.c &lt;= rhs.c;</span><br><span class="line">&#125;</span><br><span class="line">[[nodiscard]] <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; lhs, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="keyword">operator</span>&lt;=(<span class="built_in">std</span>::forward&lt;<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp;&gt;(lhs), <span class="built_in">std</span>::forward&lt;<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp;&gt;(rhs));</span><br><span class="line">&#125;</span><br><span class="line">[[nodiscard]] <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; lhs, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="keyword">operator</span>&lt;(<span class="built_in">std</span>::forward&lt;<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp;&gt;(lhs), <span class="built_in">std</span>::forward&lt;<span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp;&gt;(rhs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    container_type c&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="模板使用"><a href="#模板使用" class="headerlink" title="模板使用"></a>模板使用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">myStack&lt;<span class="keyword">int</span>&gt; int_stack;</span><br><span class="line">int_stack.push(<span class="number">42</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; int_stack.top() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">myStack&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; str_stack;</span><br><span class="line">str_stack.push(<span class="string">"42"</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; str_stack.top() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><ul><li><p>模板的参数类型可以是任何类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myStack&lt;<span class="keyword">double</span>&gt; double_stack;</span><br><span class="line">myStack&lt;<span class="keyword">double</span>*&gt; double_ptr_stack;</span><br></pre></td></tr></table></figure></li><li><p>成员函数只有<strong>被调用时</strong>才会实例化</p></li><li><p>如果模板类含有 <strong>static</strong>数据，只有两个类型相同的模板实例才会共享同一个<strong>static</strong>数据</p></li><li><p>模板成员函数只有在调用时才会实例化，所以即使有的类型不支持模板的某些操作，也可以使用模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设myStack有个print函数，把容器里的元素全部输出</span></span><br><span class="line">[[nodiscard]] <span class="function"><span class="built_in">std</span>::ostream&amp; <span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream&amp; os)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ele : c)</span><br><span class="line">    &#123;</span><br><span class="line">        os &lt;&lt; ele;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即使元素类型不支持这样操作，但是依旧可以使用该模板</span></span><br><span class="line">myStack&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; pair_stack;</span><br><span class="line">pair_stack.push(<span class="built_in">std</span>::make_pair(<span class="number">1</span>, <span class="number">42</span>));<span class="comment">// 没问题</span></span><br><span class="line">pair_stack.<span class="built_in">print</span>();<span class="comment">// 严重错误，没有针对pair类型的&lt;&lt;的操作</span></span><br></pre></td></tr></table></figure><ul><li><p>一个更常见的输出方法是实现友元,然后把print()定义为私有</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> <span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream&amp; os, <span class="keyword">const</span> myStack&lt;value_type, container_type&gt;&amp; <span class="built_in">stack</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">stack</span>.<span class="built_in">print</span>(os);</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="模板特例化"><a href="#模板特例化" class="headerlink" title="模板特例化"></a>模板特例化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myStack</span>&lt;std::string, std::vector&lt;std::string&gt;&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> value_type = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;::value_type;</span><br><span class="line">    <span class="keyword">using</span> reference = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;::reference;</span><br><span class="line">    <span class="keyword">using</span> const_reference = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;::const_reference;</span><br><span class="line">    <span class="keyword">using</span> size_type = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;::size_type;</span><br><span class="line">    <span class="keyword">using</span> container_type = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    container_type c&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>模板特例化的用于针对某些类型进行独有的操作</li></ul><h3 id="模板偏特化"><a href="#模板偏特化" class="headerlink" title="模板偏特化"></a>模板偏特化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myStack</span>&lt;T*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">using</span> value_type = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;T*&gt;::value_type;</span><br><span class="line"><span class="keyword">using</span> reference = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;T*&gt;::reference;</span><br><span class="line"><span class="keyword">using</span> const_reference = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;T*&gt;::const_reference;</span><br><span class="line"><span class="keyword">using</span> size_type = <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;T*&gt;::size_type;</span><br><span class="line"><span class="keyword">using</span> container_type = <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;T*&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">container_type c&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>模板偏特化并不特例化某种类型，只是特别指定实例化为该类型的指针</li></ul><h3 id="多个泛型的模板类"><a href="#多个泛型的模板类" class="headerlink" title="多个泛型的模板类"></a>多个泛型的模板类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPair</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::pair&lt;T1, T2&gt; p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPair</span>&lt;T, int&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::pair&lt;T, <span class="keyword">int</span>&gt; p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPair</span>&lt;int, int&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPair</span>&lt;std::string, T&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::pair&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, T&gt; p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPair</span>&lt;T, T&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::pair&lt;T, T&gt; p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPair</span>&lt;T1*, T2*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::pair&lt;T1*, T2*&gt; p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>可以选择对任意一个泛型进行全特化或是偏特化，编译器总会找到那个<strong>最特例化</strong>的模板应用(有些编译器可能会报二义性)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">myPair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; id_pair;<span class="comment">// myPair&lt;T1, T2&gt;</span></span><br><span class="line">myPair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ii_pair;<span class="comment">// myPair&lt;int, int&gt;，即使myPair&lt;T, int&gt;可见</span></span><br><span class="line">myPair&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; si_pair;<span class="comment">// myPair&lt;T, int&gt;，因为这个模板在 myPair&lt;std::string, T&gt; 前可见</span></span><br><span class="line">myPair&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">double</span>&gt; sd_pair;<span class="comment">// myPair&lt;std::string, T&gt;</span></span><br><span class="line">myPair&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; cc_pair;<span class="comment">// myPair&lt;T, T&gt;</span></span><br><span class="line">myPair&lt;<span class="keyword">int</span>*, <span class="keyword">double</span>*&gt; ipdp_pair;<span class="comment">// myPair&lt;T1*, T2*&gt;</span></span><br><span class="line">myPair&lt;<span class="keyword">int</span>*, <span class="keyword">int</span>*&gt; ipip_pair;<span class="comment">// myPair&lt;T, T&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="模板类型推断"><a href="#模板类型推断" class="headerlink" title="模板类型推断"></a>模板类型推断</h2><ul><li>C++17开始如果构造函数可以推断出所有模板参数，就不需要显式指定模板参数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">myStack&lt;<span class="keyword">int</span>&gt; int_stack;</span><br><span class="line"><span class="function">myStack <span class="title">ref_stack</span><span class="params">(int_stack)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 myStack 中加入这个构造函数(注意必须是T而不能是 value_type， 因为没推断出T之前 value_type 是未知的)</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span> : <span class="title">c</span><span class="params">(&#123; val &#125;)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">myStack <span class="title">ded_stack</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意传字符字面量会出现麻烦</span></span><br><span class="line"><span class="function">myStack <span class="title">char_stack</span><span class="params">(<span class="string">"42"</span>)</span></span>;<span class="comment">// myStack&lt;char[3]&gt;</span></span><br><span class="line"><span class="comment">// 将上面的构造函数改为(两个构造函数只能有一个，不然无法推断)</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(T val)</span> : <span class="title">c</span><span class="params">(&#123; val &#125;)</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 此时可以正确把字符字面量推断为 const char*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 既然是传值那当然是使用 move 来避免不必要的拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(T val)</span> : <span class="title">c</span><span class="params">(&#123; <span class="built_in">std</span>::<span class="built_in">move</span>(val) &#125;)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>如果我就是想用引用的构造怎么办呢？C++17新引入了<strong>deduction guide</strong>允许用户指定某个类型实例化的实际类型</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个放在类里面</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">myStack</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span> : <span class="title">c</span><span class="params">(&#123; val &#125;)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面两个放在类外面</span></span><br><span class="line">myStack(<span class="keyword">const</span> <span class="keyword">char</span>*)-&gt;myStack&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br><span class="line">myStack(<span class="keyword">char</span>[])-&gt;myStack&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面两个如果放在类里面会报错</span></span><br><span class="line"><span class="comment">// myStack(const char*)-&gt;myStack&lt;std::string&gt;;并没有实现构造函数</span></span><br><span class="line"><span class="comment">// myStack(const char* str)-&gt;myStack&lt;std::string&gt; : c(&#123;str&#125;) &#123;&#125; 会和 explicit myStack(const T&amp; val) : c(&#123; val &#125;) &#123;&#125; 产生二义性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时在构造 myStack 就可以不写参数</span></span><br><span class="line"><span class="function">myStack <span class="title">int_stack</span><span class="params">(<span class="number">1</span>)</span></span>;<span class="comment">// myStack int_stack&#123;1&#125;; 也一样</span></span><br><span class="line"><span class="function">myStack <span class="title">string_stack</span><span class="params">(<span class="string">"42"</span>)</span></span>;<span class="comment">// 不再是 myStack&lt;char[3]&gt; 而是 myStack&lt;std::string&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结构体模板化"><a href="#结构体模板化" class="headerlink" title="结构体模板化"></a>结构体模板化</h2><ul><li>结构体也能作为模板(实际上对于能在class上使用的方法对struct一样适用)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T val&#123;&#125;;</span><br><span class="line"><span class="keyword">int</span> i&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Foo() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">explicit Foo(const T&amp; v, int _i) : val(v), i(_i) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Foo&lt;<span class="keyword">int</span>&gt; foo1;</span><br><span class="line">foo1.val = <span class="number">42</span>;</span><br><span class="line">foo1.i = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Foo <span class="title">foo2</span><span class="params">(<span class="number">42</span>, <span class="number">42</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对class的其他操作也可以对struct使用</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><ul><li><del>对于C++来说，struct结构体与class类的唯一差别就是成员的默认访问权限</del></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-有关类模板的一些笔记&quot;&gt;&lt;a href=&quot;#C-有关类模板的一些笔记&quot; class=&quot;headerlink&quot; title=&quot;C++有关类模板的一些笔记&quot;&gt;&lt;/a&gt;C++有关类模板的一些笔记&lt;/h1&gt;&lt;h2 id=&quot;类模板示例&quot;&gt;&lt;a href=&quot;#类模板示例&quot; class=&quot;headerlink&quot; title=&quot;类模板示例&quot;&gt;&lt;/a&gt;类模板示例&lt;/h2&gt;
    
    </summary>
    
    
      <category term="CPP-模板" scheme="https://baka99.com/categories/CPP-%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="CPP-类模板" scheme="https://baka99.com/tags/CPP-%E7%B1%BB%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://baka99.com/2020/04/17/hello-world/"/>
    <id>https://baka99.com/2020/04/17/hello-world/</id>
    <published>2020-04-17T18:42:42.000Z</published>
    <updated>2020-04-21T05:12:28.143Z</updated>
    
    <content type="html"><![CDATA[<p>事实证明，WordPress一点也不香(其实是我自己太菜了)，而且也没有多余的时间管理，一直想找一个轻量一些的博客框架安安心心的写点文章，直到我遇见了<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>。</p><p>网上用Hexo架设博客的教程遍地都是，这里只是记录一下自己搭建的过程。</p><h2 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h2><h3 id="我的系统"><a href="#我的系统" class="headerlink" title="我的系统"></a>我的系统</h3><p><strong>虚拟机: Ubuntu 19.10</strong><br><strong>虚拟化: VMWare</strong></p><a id="more"></a><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git-core</span><br></pre></td></tr></table></figure><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>我是在<a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">nodesource</a>安装的，可以根据自己情况选择安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -</span><br><span class="line">$ sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>最好的教程就在<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a><br>我是使用以下命令安装的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo-cli</span><br><span class="line">$ sudo npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>使用sudo是因为我这里有权限问题</p><h4 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog<span class="comment"># 博客的文件名为blog</span></span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install<span class="comment">#进行安装</span></span><br><span class="line">$ hexo server<span class="comment">#启动</span></span><br></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到你的成果了</p><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>这里的配置我是参考<a href="https://segmentfault.com/a/1190000005624504" target="_blank" rel="noopener">jsyzchen</a>的文章<br><del>原创不原创我不知道，我先看到他的那他就是原创</del>🤔🤔🤔</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia<span class="comment">#下载主题</span></span><br><span class="line">$ <span class="built_in">cd</span> themes/yilia</span><br><span class="line">$ git pull<span class="comment">#之后更新用</span></span><br></pre></td></tr></table></figure><p>添加<a href="https://github.com/overtrue/share.js" target="_blank" rel="noopener">Share.js</a><br><del>我基本都不用</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim syilia/_config.yml<span class="comment">#我用的是Ubuntu所以直接用文本编辑器改的</span></span><br></pre></td></tr></table></figure><p>立里面都是中文,根据需求自己改</p><p>找到 share_jia: false 这一行,在下面加入<br>share_addthis: false<br>share_social: true</p><p>编辑yilia/layout/_partial/head.ejs文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim syilia/layout/_partial/head.ejs<span class="comment">#我用的是Ubuntu所以直接用文本编辑器改的</span></span><br></pre></td></tr></table></figure><p>加入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.share_social)&#123; %&gt;</span><br><span class="line">&lt;%- css(&#39;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;social-share.js&#x2F;1.0.13&#x2F;css&#x2F;share.min&#39;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p><del>加在那里?那不是一堆差不多格式的代码么</del></p><p>进入yilia/layout/_partial/post目录，添加share_social.ejs文件,代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;padding:0 40px 10px;&quot;&gt;</span><br><span class="line">&lt;!-- social-share Button BEGIN --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;social-share&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;social-share.js&#x2F;1.0.15&#x2F;js&#x2F;social-share.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- social-share Button END --&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>编辑yilia/layout/_partial/article.ejs文件，找到theme.share_jia的位置，把加载social-share的代码放在与他们同级的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; theme.share_social)&#123; %&gt;</span><br><span class="line">&lt;%- partial(&#39;post&#x2F;share_social&#39;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p><del>这里假定你有一个Github账号</del><br>先生成一个 <code>SSH key</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"Github的注册邮箱地址"</span></span><br></pre></td></tr></table></figure><p>一路回车不用管<br>默认生成位置是 /home/你的用户名/.ssh/ 没看到记的打开显示隐藏文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /home/你的用户名/.ssh/id_rsa.pub<span class="comment">#我用的是Ubuntu所以直接用文本编辑器改的</span></span><br></pre></td></tr></table></figure><p><strong>全部复制下来</strong></p><p>访问 <strong>GitHub – Settings – SSH and GPG keys – New SSH key</strong><br><code>Title</code>想写什么写什么 <code>Key</code>把刚才复制的内容复制进去</p><p>修改博客文件blog根目录的<code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>部署到GitHub上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>访问 <a href="https://username.github.io/" target="_blank" rel="noopener">https://username.github.io/</a> 查看你的成果</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事实证明，WordPress一点也不香(其实是我自己太菜了)，而且也没有多余的时间管理，一直想找一个轻量一些的博客框架安安心心的写点文章，直到我遇见了&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;网上用Hexo架设博客的教程遍地都是，这里只是记录一下自己搭建的过程。&lt;/p&gt;
&lt;h2 id=&quot;开始吧&quot;&gt;&lt;a href=&quot;#开始吧&quot; class=&quot;headerlink&quot; title=&quot;开始吧&quot;&gt;&lt;/a&gt;开始吧&lt;/h2&gt;&lt;h3 id=&quot;我的系统&quot;&gt;&lt;a href=&quot;#我的系统&quot; class=&quot;headerlink&quot; title=&quot;我的系统&quot;&gt;&lt;/a&gt;我的系统&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;虚拟机: Ubuntu 19.10&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;虚拟化: VMWare&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客记录" scheme="https://baka99.com/categories/%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="hello-world" scheme="https://baka99.com/tags/hello-world/"/>
    
  </entry>
  
</feed>
